void Heap_Sift(int r[], int k, int m)
{
	int i = k;
	int j = 2 * i;
	while (j <= m)
	{
		if (j < m && r[j] < r[j + 1])
			j++;
		if (r[i] > r[j])
			break;
		else
		{
			swap(r[i], r[j]);
			i = j;
			j = 2 * i;
		}
	}
}
void HeapSort(int r[], int n)
{
	for (int i = n / 2; i >= 1; i--)
		Heap_Sift(r, i, n);
	for (int i = 1; i < n; i++)
	{
		swap(r[1], r[n - i + 1]);
		Heap_Sift(r, 1, n - i);
	}
}

void Merge(int r[], int r1[], int s, int m, int t)
{
	int i = s;
	int j = m + 1;
	int k = s;
	while (i <= m && j <= t)
	{
		if (r[i] < r[j])
			r1[k++] = r[i++];
		else
			r1[k++] = r[j++];
	}
	if (i <= m)
		while (i <= m)
			r1[k++] = r[i++];
	else
		while (j <= t)
			r1[k++] = r[j++];
}
void MergePass(int r[], int r1[], int n, int h)
{
	int i = 1;
	while (i <= n - 2 * h + 1)
	{
		Merge(r, r1, i, i + h - 1, i + 2 * h - 1);
		i += h * 2;
	}
	if (i < n - h + 1)
		Merge(r, r1, i, i + h - 1, n);
	else
		for (int k = i; k <= n; k++)
			r1[k] = r[k];
}
void MergeSort(int r[], int n)
{
	int r1[100];
	int h = 1;
	while (h < n)
	{
		MergePass(r, r1, n, h);
		h = h * 2;
		MergePass(r1, r, n, h);
		h = h * 2;
	}
}